[{"content":"","date":"24 dicembre 2024","externalUrl":null,"permalink":"/tags/algorithm/","section":"Tags","summary":"","title":"Algorithm","type":"tags"},{"content":"","date":"24 dicembre 2024","externalUrl":null,"permalink":"/tags/algorithm-template/","section":"Tags","summary":"","title":"Algorithm Template","type":"tags"},{"content":"","date":"24. Januar 2024","externalUrl":null,"permalink":"/de/tags/algorithm-vorlage/","section":"Tags","summary":"","title":"Algorithm Vorlage","type":"tags"},{"content":"","date":"24 janvier 2024","externalUrl":null,"permalink":"/fr/tags/algorithme/","section":"Tags","summary":"","title":"Algorithme","type":"tags"},{"content":"","date":"24. Januar 2024","externalUrl":null,"permalink":"/de/categories/algorithmen-und-datenstrukturen/","section":"Categories","summary":"","title":"Algorithmen Und Datenstrukturen","type":"categories"},{"content":"","date":"24 janvier 2024","externalUrl":null,"permalink":"/fr/categories/algorithmes-et-structures-de-donn%C3%A9es/","section":"Categories","summary":"","title":"Algorithmes Et Structures De Données","type":"categories"},{"content":"","date":"24 dicembre 2024","externalUrl":null,"permalink":"/categories/algorithms-and-data-structures/","section":"Categories","summary":"","title":"Algorithms and Data Structures","type":"categories"},{"content":"","date":"24. Januar 2024","externalUrl":null,"permalink":"/de/tags/algorithmus/","section":"Tags","summary":"","title":"Algorithmus","type":"tags"},{"content":"","date":"24 Ocak 2024","externalUrl":null,"permalink":"/tr/tags/algoritma/","section":"Tags","summary":"","title":"Algoritma","type":"tags"},{"content":"","date":"24 Ocak 2024","externalUrl":null,"permalink":"/tr/tags/algoritma-%C5%9Fablonu/","section":"Tags","summary":"","title":"Algoritma Şablonu","type":"tags"},{"content":"","date":"24 Ocak 2024","externalUrl":null,"permalink":"/tr/categories/algoritmalar-ve-veri-yap%C4%B1lar%C4%B1/","section":"Categories","summary":"","title":"Algoritmalar Ve Veri Yapıları","type":"categories"},{"content":"","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/categories/algoritmi-e-strutture-dati/","section":"Categories","summary":"","title":"Algoritmi E Strutture Dati","type":"categories"},{"content":"","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/tags/algoritmo/","section":"Tags","summary":"","title":"Algoritmo","type":"tags"},{"content":"","date":"24 de enero de 2024","externalUrl":null,"permalink":"/es/tags/algoritmos/","section":"Tags","summary":"","title":"Algoritmos","type":"tags"},{"content":"","date":"24 de janeiro de 2024","externalUrl":null,"permalink":"/pt/categories/algoritmos-e-estruturas-de-dados/","section":"Categories","summary":"","title":"Algoritmos E Estruturas De Dados","type":"categories"},{"content":"","date":"24 de enero de 2024","externalUrl":null,"permalink":"/es/categories/algoritmos-y-estructuras-de-datos/","section":"Categories","summary":"","title":"Algoritmos Y Estructuras De Datos","type":"categories"},{"content":"","date":"24. Januar 2024","externalUrl":null,"permalink":"/de/tags/bin%C3%A4re-suche/","section":"Tags","summary":"","title":"Binäre Suche","type":"tags"},{"content":"","date":"24 dicembre 2024","externalUrl":null,"permalink":"/tags/binary-search/","section":"Tags","summary":"","title":"Binary Search","type":"tags"},{"content":"","date":"24 de janeiro de 2024","externalUrl":null,"permalink":"/pt/tags/busca-bin%C3%A1ria/","section":"Tags","summary":"","title":"Busca Binária","type":"tags"},{"content":"","date":"24 de enero de 2024","externalUrl":null,"permalink":"/es/tags/b%C3%BAsqueda-binaria/","section":"Tags","summary":"","title":"Búsqueda Binaria","type":"tags"},{"content":"","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/","section":"David Zhang","summary":"","title":"David Zhang","type":"page"},{"content":"","date":"24 Ocak 2024","externalUrl":null,"permalink":"/tr/tags/ikili-arama/","section":"Tags","summary":"","title":"İkili Arama","type":"tags"},{"content":"","date":"24 tháng 12 năm 2024","externalUrl":null,"permalink":"/vi/tags/m%E1%BA%ABu-thu%E1%BA%ADt-to%C3%A1n/","section":"Tags","summary":"","title":"Mẫu Thuật Toán","type":"tags"},{"content":"","date":"24 janvier 2024","externalUrl":null,"permalink":"/fr/tags/mod%C3%A8le-dalgorithme/","section":"Tags","summary":"","title":"Modèle D'algorithme","type":"tags"},{"content":"","date":"24 de janeiro de 2024","externalUrl":null,"permalink":"/pt/tags/modelos-de-algoritmos/","section":"Tags","summary":"","title":"Modelos De Algoritmos","type":"tags"},{"content":"","date":"24 de enero de 2024","externalUrl":null,"permalink":"/es/tags/plantillas-de-algoritmos/","section":"Tags","summary":"","title":"Plantillas De Algoritmos","type":"tags"},{"content":"","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"24 janvier 2024","externalUrl":null,"permalink":"/fr/tags/recherche-binaire/","section":"Tags","summary":"","title":"Recherche Binaire","type":"tags"},{"content":"","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/tags/ricerca-binaria/","section":"Tags","summary":"","title":"Ricerca Binaria","type":"tags"},{"content":" Ricerca Binaria # La ricerca binaria può essere utilizzata per trovare rapidamente un elemento specifico in una sequenza ordinata. Rispetto alla ricerca lineare con una complessità temporale di $O(n)$, la ricerca binaria richiede solo $O(\\log n)$ tempo, il che la rende molto efficiente quando si ha a che fare con grandi insiemi di dati.\nL\u0026rsquo;Idea Centrale della Ricerca Binaria # L\u0026rsquo;idea di base della ricerca binaria è quella di dimezzare ripetutamente l\u0026rsquo;intervallo di ricerca. Ogni volta, l\u0026rsquo;elemento centrale viene confrontato con il valore di destinazione. Se l\u0026rsquo;elemento centrale non soddisfa la condizione, metà dell\u0026rsquo;intervallo può essere eliminata; altrimenti, la ricerca continua nell\u0026rsquo;altra metà dell\u0026rsquo;intervallo. Poiché metà dell\u0026rsquo;intervallo di ricerca viene scartata ogni volta, la complessità temporale della ricerca può raggiungere $O(\\log n)$.\nLa ricerca binaria è molto utile per i problemi in cui \u0026ldquo;le soluzioni possibili possono essere suddivise in un intervallo ordinato (che soddisfa la condizione) e un altro intervallo ordinato (che non soddisfa la condizione)\u0026rdquo;. Per esempio:\nTrovare se un elemento esiste in un array ordinato Trovare la \u0026ldquo;prima posizione\u0026rdquo; o \u0026ldquo;l\u0026rsquo;ultima posizione\u0026rdquo; in cui appare un numero Esempio: Trovare le Posizioni Iniziale e Finale di un Elemento # Descrizione del Problema: Dato un array di interi ordinato in modo crescente di lunghezza $n$, e $q$ query. Ogni query fornisce un intero $k$, e dobbiamo trovare la \u0026ldquo;posizione iniziale\u0026rdquo; e \u0026ldquo;la posizione finale\u0026rdquo; di $k$ nell\u0026rsquo;array (indici che partono da 0). Se il numero non esiste nell\u0026rsquo;array, restituisci $-1$ $-1$.\nFormato di Input:\nLa prima riga: due interi $n$ e $q$, che rappresentano la lunghezza dell\u0026rsquo;array e il numero di query, rispettivamente. La seconda riga: $n$ interi (compresi tra 1 e 10000), che rappresentano l\u0026rsquo;intero array, già ordinato in ordine crescente. Le seguenti $q$ righe: ogni riga contiene un intero $k$, che rappresenta un elemento di query. Formato di Output: Per ogni query, stampa le posizioni iniziale e finale dell\u0026rsquo;elemento nell\u0026rsquo;array su una singola riga. Se l\u0026rsquo;elemento non esiste nell\u0026rsquo;array, stampa $-1$ $-1$.\nEsempio:\nInput: 6 3 1 2 2 3 3 4 3 4 5 Output: 3 4 5 5 -1 -1 Spiegazione:\nL\u0026rsquo;intervallo in cui appare l\u0026rsquo;elemento 3 è [3, 4]; L\u0026rsquo;elemento 4 appare solo una volta, alla posizione 5; L\u0026rsquo;elemento 5 non esiste nell\u0026rsquo;array, quindi restituisci -1 -1. L\u0026rsquo;Approccio di Applicazione della Ricerca Binaria # In questo problema, possiamo fare affidamento sulla ricerca binaria per trovare il \u0026ldquo;limite sinistro\u0026rdquo; e il \u0026ldquo;limite destro\u0026rdquo; di un certo valore. La chiave è capire come definire l\u0026rsquo;intervallo di ricerca e come spostare i puntatori in base al risultato del confronto.\nTrovare il \u0026ldquo;limite sinistro\u0026rdquo;: Cioè, trovare la prima posizione che è maggiore o uguale a $k$. L\u0026rsquo;array può essere diviso in due parti:\nTutti i numeri a sinistra sono \u0026ldquo;minori di\u0026rdquo; $k$ Tutti i numeri a destra sono \u0026ldquo;maggiori o uguali a\u0026rdquo; $k$ Trovare il \u0026ldquo;limite destro\u0026rdquo;: Cioè, trovare l\u0026rsquo;ultima posizione che è minore o uguale a $k$. L\u0026rsquo;array può essere diviso in due parti:\nTutti i numeri a sinistra sono \u0026ldquo;minori o uguali a\u0026rdquo; $k$ Tutti i numeri a destra sono \u0026ldquo;maggiori di\u0026rdquo; $k$ Finché questi due intervalli possono essere mantenuti correttamente, il risultato può essere ottenuto rapidamente attraverso la ricerca binaria.\nTemplate Raccomandato: Codice di Ricerca Binaria per Evitare Cicli Infiniti # Ecco un template di ricerca binaria elegante e resistente agli errori. Assicura che il ciclo termini quando $l$ e $r$ sono adiacenti avvicinando gradualmente $l$ e $r$:\nDefinisci due puntatori $l, r$, con gli invarianti: l\u0026rsquo;intervallo chiuso $[0, l]$ appartiene tutto alla parte sinistra, l\u0026rsquo;intervallo chiuso $[r, n - 1]$ appartiene tutto alla parte destra. $l$ e $r$ sono inizializzati rispettivamente a $-1$ e $n$.\nQuando l\u0026rsquo;algoritmo termina, $l$ e $r$ sono adiacenti, puntando rispettivamente al valore massimo nella parte sinistra e al valore minimo nella parte destra.\nPoiché la soluzione desiderata potrebbe non esistere, quando si restituisce $l$ o $r$, è necessario verificare se il valore corrispondente è il valore che vogliamo e se è fuori dai limiti. Ad esempio, $l$ rappresenta il valore massimo $\\leq k$, e dobbiamo controllare l != -1 \u0026amp;\u0026amp; nums[l] == k\n#include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; int main() { int n, q; cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; q; vector\u0026lt;int\u0026gt; nums(n); for(int i = 0; i \u0026lt; n; i++) cin \u0026gt;\u0026gt; nums[i]; while(q--) { int k; cin \u0026gt;\u0026gt; k; // 1. Trova la posizione iniziale di k (limite sinistro) // Dividi l\u0026#39;array in due parti, la parte sinistra tutta \u0026lt; k, e la parte destra tutta \u0026gt;= k. // Il limite sinistro è l\u0026#39;indice più piccolo della parte destra. int l = -1, r = n; while(l \u0026lt; r - 1) { int mid = (l + r) / 2; if(nums[mid] \u0026gt;= k) r = mid; else l = mid; } // Se r è fuori dai limiti o nums[r] != k, significa che k non esiste if (r == n || nums[r] != k) { cout \u0026lt;\u0026lt; -1 \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; -1 \u0026lt;\u0026lt; endl; continue; } int leftPos = r; // Registra il limite sinistro di k // 2. Trova la posizione finale di k (limite destro) // Dividi l\u0026#39;array in due parti, la parte sinistra tutta \u0026lt;= k, e la parte destra tutta \u0026gt; k. // Il limite destro è l\u0026#39;indice più grande della parte sinistra. l = -1, r = n; while(l \u0026lt; r - 1) { int mid = (l + r) / 2; if(nums[mid] \u0026lt;= k) l = mid; else r = mid; } // Dato che abbiamo già verificato che k esiste, non è necessario verificare di nuovo qui int rightPos = l; // Limite destro cout \u0026lt;\u0026lt; leftPos \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; rightPos \u0026lt;\u0026lt; endl; } return 0; } Perché questo metodo è meno soggetto a errori? # Questo metodo ha invarianti strettamente definiti. Può trovare sia il limite sinistro che quello destro, rendendolo applicabile a tutti gli scenari. Alcuni metodi usano $l == r$ come condizione di terminazione. Quando $l$ e $r$ differiscono di 1, il $mid$ calcolato sarà uguale a l o r. Se non gestito correttamente, l\u0026rsquo;aggiornamento di l o r a mid non restringerà l\u0026rsquo;intervallo di ricerca, portando a un ciclo infinito. Al contrario, questo metodo termina quando $l$ e $r$ sono adiacenti, evitando questo problema. Soluzione STL: lower_bound e upper_bound # Se usi le funzioni lower_bound e upper_bound fornite dalla STL di C++, puoi facilmente ottenere lo stesso risultato:\nlower_bound(first, last, val) restituisce \u0026ldquo;la prima posizione maggiore o uguale a val\u0026rdquo; upper_bound(first, last, val) restituisce \u0026ldquo;la prima posizione maggiore di val\u0026rdquo; Ad esempio, supponiamo che nums = {1,2,3,4,4,4,4,4,5,5,6}, e vogliamo conoscere l\u0026rsquo;intervallo in cui appare 4:\nvector\u0026lt;int\u0026gt; nums = {1,2,3,4,4,4,4,4,5,5,6}; auto it1 = lower_bound(nums.begin(), nums.end(), 4); auto it2 = upper_bound(nums.begin(), nums.end(), 4); if (it1 == nums.end() || *it1 != 4) { // Indica che 4 non esiste nell\u0026#39;array cout \u0026lt;\u0026lt; \u0026#34;4 appare 0 volte\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;il primo 4 è in posizione \u0026#34; \u0026lt;\u0026lt; it1 - nums.begin() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;l\u0026#39;ultimo 4 è in posizione \u0026#34; \u0026lt;\u0026lt; it2 - nums.begin() - 1 \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;4 appare \u0026#34; \u0026lt;\u0026lt; it2 - it1 \u0026lt;\u0026lt; \u0026#34; volte\u0026#34; \u0026lt;\u0026lt; endl; } it1 punta alla prima posizione in cui il valore è maggiore o uguale a 4. it2 punta alla prima posizione in cui il valore è maggiore di 4. Pertanto, it2 - it1 è il numero di volte in cui 4 appare nell\u0026rsquo;array; it2 - nums.begin() - 1 è il limite destro di 4. Queste due funzioni sono particolarmente utili quando si cercano intervalli o si contano le occorrenze.\nSupplemento # La ricerca binaria può anche essere estesa per la ricerca all\u0026rsquo;interno di numeri in virgola mobile (ad es. trovare le radici di un\u0026rsquo;equazione), così come la ricerca ternaria per trovare i valori estremi di funzioni unimodali. Finché capisci il principio fondamentale di \u0026ldquo;eliminare metà in un intervallo ordinato ogni volta\u0026rdquo;, scoprirai che la ricerca binaria può aiutarti a risolvere i problemi in modo efficiente in molti scenari.\nEsercizio # LeetCode 33. Search in Rotated Sorted Array\nSuggerimento: usa la ricerca binaria per trovare prima il punto di rotazione, e poi usa la ricerca binaria per trovare il valore di destinazione.\n","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/posts/1735078223417-binary-search-intro/","section":"Posts","summary":"Come implementare elegantemente l\u0026rsquo;algoritmo di ricerca binaria sugli interi","title":"Ricerca Binaria","type":"posts"},{"content":"","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"24 gennaio 2024","externalUrl":null,"permalink":"/it/tags/template-algoritmo/","section":"Tags","summary":"","title":"Template Algoritmo","type":"tags"},{"content":"","date":"24 tháng 12 năm 2024","externalUrl":null,"permalink":"/vi/tags/thu%E1%BA%ADt-to%C3%A1n/","section":"Tags","summary":"","title":"Thuật Toán","type":"tags"},{"content":"","date":"24 tháng 12 năm 2024","externalUrl":null,"permalink":"/vi/categories/thu%E1%BA%ADt-to%C3%A1n-v%C3%A0-c%E1%BA%A5u-tr%C3%BAc-d%E1%BB%AF-li%E1%BB%87u/","section":"Categories","summary":"","title":"Thuật Toán Và Cấu Trúc Dữ Liệu","type":"categories"},{"content":"","date":"24 tháng 12 năm 2024","externalUrl":null,"permalink":"/vi/tags/t%C3%ACm-ki%E1%BA%BFm-nh%E1%BB%8B-ph%C3%A2n/","section":"Tags","summary":"","title":"Tìm Kiếm Nhị Phân","type":"tags"},{"content":"","date":"24 января 2024","externalUrl":null,"permalink":"/ru/tags/%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC/","section":"Tags","summary":"","title":"Алгоритм","type":"tags"},{"content":"","date":"24 января 2024","externalUrl":null,"permalink":"/ru/categories/%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D1%8B-%D0%B8-%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D1%83%D1%80%D1%8B-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85/","section":"Categories","summary":"","title":"Алгоритмы И Структуры Данных","type":"categories"},{"content":"","date":"24 января 2024","externalUrl":null,"permalink":"/ru/tags/%D0%B4%D0%B2%D0%BE%D0%B8%D1%87%D0%BD%D1%8B%D0%B9-%D0%BF%D0%BE%D0%B8%D1%81%D0%BA/","section":"Tags","summary":"","title":"Двоичный Поиск","type":"tags"},{"content":"","date":"24 января 2024","externalUrl":null,"permalink":"/ru/tags/%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD-%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D0%B0/","section":"Tags","summary":"","title":"Шаблон Алгоритма","type":"tags"},{"content":"","date":"24 जनवरी 2024","externalUrl":null,"permalink":"/hi/tags/%E0%A4%8F%E0%A4%B2%E0%A5%8D%E0%A4%97%E0%A5%8B%E0%A4%B0%E0%A4%BF%E0%A4%A5%E0%A4%AE/","section":"Tags","summary":"","title":"एल्गोरिथम","type":"tags"},{"content":"","date":"24 जनवरी 2024","externalUrl":null,"permalink":"/hi/categories/%E0%A4%8F%E0%A4%B2%E0%A5%8D%E0%A4%97%E0%A5%8B%E0%A4%B0%E0%A4%BF%E0%A4%A5%E0%A4%AE-%E0%A4%94%E0%A4%B0-%E0%A4%A1%E0%A5%87%E0%A4%9F%E0%A4%BE-%E0%A4%B8%E0%A4%82%E0%A4%B0%E0%A4%9A%E0%A4%A8%E0%A4%BE%E0%A4%8F%E0%A4%82/","section":"Categories","summary":"","title":"एल्गोरिथम और डेटा संरचनाएं","type":"categories"},{"content":"","date":"24 जनवरी 2024","externalUrl":null,"permalink":"/hi/tags/%E0%A4%8F%E0%A4%B2%E0%A5%8D%E0%A4%97%E0%A5%8B%E0%A4%B0%E0%A4%BF%E0%A4%A5%E0%A4%AE-%E0%A4%9F%E0%A5%87%E0%A4%AE%E0%A5%8D%E0%A4%AA%E0%A4%B2%E0%A5%87%E0%A4%9F/","section":"Tags","summary":"","title":"एल्गोरिथम टेम्पलेट","type":"tags"},{"content":"","date":"24 जनवरी 2024","externalUrl":null,"permalink":"/hi/tags/%E0%A4%AC%E0%A4%BE%E0%A4%87%E0%A4%A8%E0%A4%B0%E0%A5%80-%E0%A4%B8%E0%A4%B0%E0%A5%8D%E0%A4%9A/","section":"Tags","summary":"","title":"बाइनरी सर्च","type":"tags"},{"content":"","date":"2024년 12월 24일","externalUrl":null,"permalink":"/ko/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/","section":"Tags","summary":"","title":"알고리즘","type":"tags"},{"content":"","date":"2024년 12월 24일","externalUrl":null,"permalink":"/ko/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B0%8F-%EC%9E%90%EB%A3%8C-%EA%B5%AC%EC%A1%B0/","section":"Categories","summary":"","title":"알고리즘 및 자료 구조","type":"categories"},{"content":"","date":"2024년 12월 24일","externalUrl":null,"permalink":"/ko/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%85%9C%ED%94%8C%EB%A6%BF/","section":"Tags","summary":"","title":"알고리즘 템플릿","type":"tags"},{"content":"","date":"2024년 12월 24일","externalUrl":null,"permalink":"/ko/tags/%EC%9D%B4%EB%B6%84-%EA%B2%80%EC%83%89/","section":"Tags","summary":"","title":"이분 검색","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/ja/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/","section":"Tags","summary":"","title":"アルゴリズム","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/ja/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88/","section":"Tags","summary":"","title":"アルゴリズムテンプレート","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/ja/categories/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%81%A8%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0/","section":"Categories","summary":"","title":"アルゴリズムとデータ構造","type":"categories"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/ja/tags/%E4%BA%8C%E5%88%86%E6%8E%A2%E7%B4%A2/","section":"Tags","summary":"","title":"二分探索","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/zh-tw/tags/%E4%BA%8C%E5%88%86%E6%90%9C%E5%B0%8B/","section":"Tags","summary":"","title":"二分搜尋","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/zh-cn/tags/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2/","section":"Tags","summary":"","title":"二分搜索","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/zh-tw/tags/%E6%BC%94%E7%AE%97%E6%B3%95/","section":"Tags","summary":"","title":"演算法","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/zh-tw/tags/%E6%BC%94%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/","section":"Tags","summary":"","title":"演算法模板","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/zh-tw/categories/%E6%BC%94%E7%AE%97%E6%B3%95%E8%88%87%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B/","section":"Categories","summary":"","title":"演算法與資料結構","type":"categories"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/zh-cn/tags/%E7%AE%97%E6%B3%95/","section":"Tags","summary":"","title":"算法","type":"tags"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/zh-cn/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","section":"Categories","summary":"","title":"算法与数据结构","type":"categories"},{"content":"","date":"2024年12月24日","externalUrl":null,"permalink":"/zh-cn/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E6%9D%BF/","section":"Tags","summary":"","title":"算法模板","type":"tags"},{"content":"","externalUrl":null,"permalink":"/it/series/","section":"Series","summary":"","title":"Series","type":"series"}]